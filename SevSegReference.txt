0: 1000000
1: 1111001
2: 0100100
3: 0110000
4: 0011001
5: 0010010
6: 0000010
7: 1111000
8: 0000000
9: 0011000

S: 1111111 (Space)

N: 1001000
E: 0000110
W: 1010101

H: 0001001
I: 1001111
G: 1000010
H: 0001001

S: 0010010
C: 1000110
O: 1000000
R: 1001100

A: 0100000
B: 0000011
C: 1000110
D: 0100001
E: 0000110
F: 0001110
G: 1000010
H: 0001001
I: 1001111
J: 1100001
K: 0001010
L: 1000111
M: 1101010
N: 1001000
O: 1000000
P: 0001100
Q: 0011000
R: 1001100
S: 0010010
T: 0000111
U: 1000001
V: 1010001
W: 1010101
X: 0001001
Y: 0010001
Z: 0110100

W: 1010101
E: 0000110
L: 1000111
C: 1000110
O: 1000000
M: 1101010
E: 0000110
S: 1111111 (Space)
T: 0000111
O: 1000000
S: 1111111 (Space)
S: 0010010
I: 1001111
M: 1101010
O: 1000000
N: 1001000
S: 1111111 (Space)
S: 0010010
A: 0100000
Y: 0010001
S: 0010010
S: 1111111 (Space)

always @ posedge clk
	addr <= addr + 1
	dina <= douta of the other memory blcok



reg [27:0] assigne [49:0] // 2D array

// He said do this
always @ posedge clk
	if (init)
		addra <= sel
		index <= index + 1
		assign[indx] <= douta